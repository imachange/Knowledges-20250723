name: Obsidian Vault Sync Workflow
# このワークフローは、Obsidian Vaultのコンテンツと設定をGitで効率的に管理し、
# GitHub Actionsによる自動化と品質保証を統合します。

on:
  push:
    branches:
      - dev
      - edit
      - main # mainブランチへのプッシュもトリガー
  pull_request: # プルリクエストイベントを追加
    branches:
      - main # mainブランチをターゲットとするプルリクエスト時に実行

jobs:
  # ジョブ1: プッシュ時のセキュリティチェック
  # dev/edit/mainのいずれかのブランチにプッシュされた際に実行されます。
  # コードに機密情報などが含まれていないかを確認します。
  security-check:
    name: Run Security Checks on Push
    runs-on: ubuntu-latest
    # GitHub Actions botからのプッシュはスキップ（自動マージなどによる不要なトリガーを避けるため）
    if: github.event_name == 'push' && github.event.sender.login != 'github-actions[bot]'
    permissions:
      contents: read # リポジトリの内容を読み取る権限のみ
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Run Gitleaks Scan
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # ジョブ2: dev/edit -> mainへの自動プルリクエスト作成
  # devまたはeditブランチにプッシュされ、かつsecurity-checkジョブが成功した場合に実行されます。
  # mainブランチへのプルリクエストを自動作成します。
  auto-pr:
    name: Create PR from Feature Branch to Main
    runs-on: ubuntu-latest
    needs: security-check # security-checkジョブの完了に依存
    # GitHub Actions botからのプッシュはスキップ
    if: github.event_name == 'push' && (github.ref == 'refs/heads/dev' || github.ref == 'refs/heads/edit') && github.event.sender.login != 'github-actions[bot]'
    permissions:
      contents: write # リポジトリへの書き込み権限（コミット）
      pull-requests: write # プルリクエストの作成権限
    outputs:
      pr_url: ${{ steps.create_pr.outputs.pull-request-url }} # 作成されたPRのURLをDiscord通知ジョブに渡す

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # 全ての履歴を取得（git logで過去のコミットメッセージを取得するため）

      - name: Get branch name
        id: branch_name
        run: echo "branch=${GITHUB_REF##*/}" >> $GITHUB_OUTPUT

      - name: Get all commit subjects
        id: commit_subjects
        run: |
          echo "subjects<<EOF" | tee -a $GITHUB_OUTPUT > /dev/null
          LOG_OUTPUT=$(git log --pretty=format:"- %s" origin/main..${{ github.ref }})
          
          if [ -n "$LOG_OUTPUT" ]; then
            echo "$LOG_OUTPUT" >> $GITHUB_OUTPUT
          else
            echo "  (新しいコミットメッセージはありません)" >> $GITHUB_OUTPUT
          fi
          
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Debug Git Diff
        # PR作成前に、editブランチとmainブランチの差分を詳細にログ出力します
        # これにより、なぜPRが作成されないのかの理由を特定しやすくなります
        run: |
          echo "--- Debugging Git Differences ---"
          echo "Current branch (HEAD): $(git rev-parse HEAD)"
          echo "origin/main HEAD: $(git rev-parse origin/main)"
          echo "origin/${{ github.ref_name }} HEAD: $(git rev-parse origin/${{ github.ref_name }})"
          echo ""
          echo "--- git diff origin/main...${{ github.ref }} ---"
          git diff origin/main...${{ github.ref }} || echo "No diff found between origin/main and ${{ github.ref }}"
          echo ""
          echo "--- git log origin/main..${{ github.ref }} (commits in ${{ github.ref }} but not in origin/main) ---"
          git log --pretty=format:"- %s (%h)" origin/main..${{ github.ref }} || echo "No unique commits found in ${{ github.ref }}."
          echo "---------------------------------"

      - name: Create Pull Request
        id: create_pr # IDを追加して出力を使えるようにする
        uses: peter-evans/create-pull-request@v6
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          commit-message: "feat(${steps.branch_name.outputs.branch}): Sync changes from ${steps.branch_name.outputs.branch}"
          title: "Merge ${{ steps.branch_name.outputs.branch }} into main"
          body: |
            自動生成されたプルリクエストです。
            **プッシュ時のセキュリティチェックが正常に完了しました。**

            **ブランチ**: `${{ steps.branch_name.outputs.branch }}`

            このプルリクエストは、以下の変更を `main` ブランチに同期します。
            - プラグインやテンプレートの追加・更新 (`dev` ブランチ)
            - 日記や記事の追加・編集 (`edit` ブランチ)

            **含まれる主な変更点:**
            ${{ steps.commit_subjects.outputs.subjects }}

            レビュー後、`squash and merge` でマージしてください。
          labels: auto-pr
          branch: ${{ steps.branch_name.outputs.branch }} # PR作成元のブランチ
          base: main # PRのマージ先ブランチ
          delete-branch: false # PRマージ後にブランチを自動削除しない
          rebase: false # <-- ここを修正: リベースを無効にし、純粋な差分でPR作成を試みる

  # ジョブ3: プルリクエスト時の文法・スタイルチェック
  # mainブランチをターゲットとするプルリクエストが作成・更新された際に実行されます。
  # Markdownファイルなどの文法やスタイルをチェックします。
  lint-and-grammar-check:
    name: Run Lint and Grammar Checks on PR
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    permissions:
      contents: read # コード読み取り権限
      pull-requests: write # PRのステータス更新やコメント追加のために必要（任意）
    steps:
      - name: Checkout PR branch
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.ref }}

      - name: Run LanguageTool (Grammar Checker)
        # 英語などの文法チェックに特化しています。
        uses: reviewdog/action-languagetool@v1.22.0
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          reporter: github-pr-review
          level: info

      - name: Run Alex (Grammar Checker)
        # 不適切な表現やインクルーシブな言葉遣いをチェックします。
        uses: reviewdog/action-alex@v1.16.0
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          reporter: github-pr-review
          level: warning

      - name: Check Markdown Files
        id: check_md
        run: |
          if git diff --name-only origin/${{ github.base_ref }}...HEAD | grep '\.md$'; then
            echo "found=true" >> $GITHUB_OUTPUT
          else
            echo "found=false" >> $GITHUB_OUTPUT
          fi

      - name: textlint-github-pr-review
        if: steps.check_md.outputs.found == 'true'
        uses: tsuyoshicho/action-textlint@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          reporter: github-pr-review
          textlint_flags: "**/*.md"

      - name: markdownlint
        if: steps.check_md.outputs.found == 'true'
        uses: reviewdog/action-markdownlint@3667398db9118d7e78f7a63d10e26ce454ba5f58 # v0.26.2
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          reporter: github-pr-review
          level: warning
          
      - name: Debug Reviewdog
        run: echo $REVIEWDOG_DEBUG
        env:
          REVIEWDOG_DEBUG: true

  # ジョブ4: main -> dev/editへの自動マージ
  # mainブランチにプッシュされ、かつsecurity-checkジョブが成功した場合に実行されます。
  # mainブランチの最新の内容をdevおよびeditブランチに自動的にマージします。
  auto-merge-main:
    name: Auto-merge Main into Feature Branches
    runs-on: ubuntu-latest
    needs: security-check # security-checkジョブの完了に依存
    # GitHub Actions botからのプッシュの場合にのみ実行（mainへのマージはbotが行うため）
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    permissions:
      contents: write # ブランチへのプッシュ権限
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }} # デフォルトのGitHubトークンを使用

      - name: Configure Git
        run: |
          git config user.name "GitHub Actions Bot"
          git config user.email "actions@github.com"

      - name: Merge main into dev
        run: |
          git checkout dev
          git pull origin dev # devブランチの最新を取得（念のため）
          git merge main -m "Merge main into dev after main update (auto)"
          git push origin dev
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Merge main into edit
        run: |
          git checkout edit
          git pull origin edit # editブランチの最新を取得（念のため）
          git merge main -m "Merge main into edit after main update (auto)"
          git push origin edit
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # ジョブ5: Discord通知
  # ワークフロー全体の最後に実行され、結果をDiscordに通知します。
  # DISCORD_WEBHOOK_URLシークレットが存在しない場合はスキップされます。
  discord-notification:
    name: Discord Notification
    runs-on: ubuntu-latest
    # 全ての依存ジョブが完了した後に実行 (成功/失敗に関わらず)
    needs: [security-check, auto-pr, lint-and-grammar-check, auto-merge-main]
    if: always() # 全てのジョブの結果に関わらず常に実行

    steps:
      - name: Determine Workflow Status
        id: status
        run: |
          WORKFLOW_STATUS="success"
          if [ "${{ needs.security-check.result }}" == "failure" ] || \
             [ "${{ needs.auto-pr.result }}" == "failure" ] || \
             [ "${{ needs.lint-and-grammar-check.result }}" == "failure" ] || \
             [ "${{ needs.auto-merge-main.result }}" == "failure" ]; then
              WORKFLOW_STATUS="failure"
          fi

          MESSAGE="✅ ワークフローが正常に完了しました！"
          COLOR="3066993" # 緑色（decimal）

          if [ "$WORKFLOW_STATUS" == "failure" ]; then
              MESSAGE="❌ ワークフローが失敗しました！"
              COLOR="15548997" # 赤色（decimal）
          fi

          echo "message=$MESSAGE" >> $GITHUB_OUTPUT
          echo "color=$COLOR" >> $GITHUB_OUTPUT
          echo "workflow_status=$WORKFLOW_STATUS" >> $GITHUB_OUTPUT

      - name: Check for Discord Webhook URL
        id: check_webhook
        run: |
          if [ -z "${{ secrets.DISCORD_WEBHOOK_URL }}" ]; then
            echo "::warning ::DISCORD_WEBHOOK_URL secret is not set. Skipping Discord notification."
            echo "send_notification=false" >> $GITHUB_OUTPUT
          else
            echo "send_notification=true" >> $GITHUB_OUTPUT
          fi

      - name: Send Discord Notification
        uses: rjstone/discord-webhook-notify@v1
        # 'send_notification' フラグが 'true' の場合にのみこのステップを実行します。
        if: ${{ steps.check_webhook.outputs.send_notification == 'true' }}
        with:
          severity: ${{ steps.status.outputs.workflow_status }}
          description: |
            ${{ steps.status.message }}
            リポジトリ: [${{ github.repository }}](${{ github.server_url }}/${{ github.repository }})
            ワークフロー: [${{ github.workflow }}](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})
            ブランチ: `${{ github.ref_name }}`

            ---
            **各ジョブの結果:**
            - Security Check: ${{ needs.security-check.result }}
            - Auto PR: ${{ needs.auto-pr.result }}
            - Lint/Grammar: ${{ needs.lint-and-grammar-check.result }}
            - Auto Merge Main: ${{ needs.auto-merge-main.result }}

            ${{ (needs.auto-pr.outputs.pr_url && needs.auto-pr.result == 'success') && format('**プルリクエスト:** {0}', needs.auto-pr.outputs.pr_url) || '' }}

          webhook_url: ${{ secrets.DISCORD_WEBHOOK_URL }}
