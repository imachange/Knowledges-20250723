name: Vault同期ワークフロー
# Obsidian Vaultのコンテンツと設定をGitで効率的に管理、
# GitHub Actionsによる自動化と品質保証を統合。

# ワークフロー全体のデフォルト権限を設定
permissions:
  contents: write
  pull-requests: write
  issues: write

on:
  push:
    branches:
      - dev
      - edit
      - main # mainブランチへのプッシュもトリガー
  pull_request: # プルリクエストイベントを追加
    branches:
      - main # mainブランチをターゲットとするプルリクエスト時に実行

jobs:
  # ジョブ1: プッシュ時のセキュリティチェック
  # dev/edit/mainいずれかのブランチへのプッシュ時に実行。
  # コードに機密情報などの有無を確認。
  security-check:
    name: プッシュ時のセキュリティチェック
    runs-on: ubuntu-latest
    # GitHub Actions botからのプッシュはスキップ（自動マージなどによる不要なトリガーを回避）
    if: github.event_name == 'push' && github.event.sender.login != 'github-actions[bot]'
    permissions:
      contents: read # リポジトリの内容を読み取る権限のみ
    steps:
      - name: リポジトリをチェックアウト
        uses: actions/checkout@v4

      - name: Gitleaksスキャンを実行
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # ジョブ2: dev/edit -> mainへの自動プルリクエスト作成
  # devまたはeditブランチへのプッシュ、かつsecurity-checkジョブ成功時に実行。
  # mainブランチへのプルリクエストを自動作成。
  auto-pr:
    name: mainブランチへのPR作成
    runs-on: ubuntu-latest
    needs: security-check # security-checkジョブの完了に依存
    # GitHub Actions botからのプッシュはスキップ
    if: github.event_name == 'push' && (github.ref == 'refs/heads/dev' || github.ref == 'refs/heads/edit') && github.event.sender.login != 'github-actions[bot]'
    # ジョブレベルの権限はワークフローレベルの権限を上書きするため、ここでは明示的に記述を維持
    permissions:
      contents: write # リポジトリへの書き込み権限（コミット）
      pull-requests: write # プルリクエストの作成権限
    outputs:
      pr_url: ${{ steps.create_pr.outputs.pull-request-url }} # 作成されたPRのURLをDiscord通知ジョブに渡す

    steps:
      - name: リポジトリをチェックアウト
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # 全履歴を取得（git logで過去のコミットメッセージ取得のため）

      - name: ブランチ名を取得
        id: branch_name
        run: echo "branch=${GITHUB_REF##*/}" >> $GITHUB_OUTPUT

      - name: 全てのコミットサブジェクトを取得
        id: commit_subjects
        run: |
          echo "subjects<<EOF" | tee -a $GITHUB_OUTPUT > /dev/null
          LOG_OUTPUT=$(git log --pretty=format:"- %s" origin/main..${{ github.ref }})
          
          if [ -n "$LOG_OUTPUT" ]; then
            echo "$LOG_OUTPUT" >> $GITHUB_OUTPUT
          else
            echo "  (新しいコミットメッセージなし)" >> $GITHUB_OUTPUT
          fi
          
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Git差分をデバッグ
        # PR作成前に、editブランチとmainブランチの差分を詳細にログ出力。
        # これにより、PRが作成されない理由を特定。
        run: |
          echo "--- Git差分のデバッグ ---"
          echo "現在のブランチ (HEAD): $(git rev-parse HEAD)"
          echo "origin/main HEAD: $(git rev-parse origin/main)"
          echo "origin/${{ github.ref_name }} HEAD: $(git rev-parse origin/${{ github.ref_name }})"
          echo ""
          echo "--- git diff origin/main...refs/heads/edit ---"
          git diff origin/main...${{ github.ref }} || echo "origin/main と ${{ github.ref }} の間に差分なし"
          echo ""
          echo "--- git log origin/main..refs/heads/edit (origin/mainにない${{ github.ref }}のコミット) ---"
          git log --pretty=format:"- %s (%h)" origin/main..${{ github.ref }} || echo "${{ github.ref }}にユニークなコミットなし。"
          echo "---------------------------------"

      - name: プルリクエストを作成 (github-scriptを使用)
        id: create_pr # IDは以前の create_pr のまま維持
        uses: actions/github-script@v6 # github-script アクションを使用
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            // 前のステップからの出力を環境変数として取得
            const branchName = process.env.BRANCH_NAME;
            const commitSubjects = process.env.COMMIT_SUBJECTS;

            const title = `Merge ${branchName} into main`;
            const body = `自動生成されたプルリクエストです。
            **プッシュ時のセキュリティチェックが正常に完了しました。**

            **ブランチ**: \`${branchName}\`

            このプルリクエストは、以下の変更を \`main\` ブランチに同期します。
            - プラグインやテンプレートの追加・更新 (\`dev\` ブランチ)
            - 日記や記事の追加・編集 (\`edit\` ブランチ)

            **含まれる主な変更点:**
            ${commitSubjects}

            レビュー後、\`squash and merge\` でマージしてください。`;

            try {
              // GitHub API を直接呼び出してプルリクエストを作成
              const { data: pullRequest } = await github.rest.pulls.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title,
                head: branchName, // 作成元ブランチ
                base: 'main',     // マージ先ブランチ
                body,
                draft: false, // ドラフトPRとして作成しない
              });

              console.log(`Pull Request created: ${pullRequest.html_url}`);
              // 作成されたPRのURLをジョブの出力として設定
              core.setOutput('pull-request-url', pullRequest.html_url);

              // 作成されたPRにラベルを追加
              await github.rest.issues.addLabels({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: pullRequest.number,
                labels: ['auto-pr']
              });

            } catch (error) {
              // PRが既に存在する場合や、差分がない場合のハンドリング
              if (error.status === 422 && error.response.data.errors && error.response.data.errors[0].message.includes('No commits between')) {
                console.log('ソースブランチとベースブランチの間に新しいコミットがありません。PR作成をスキップ。');
                core.setOutput('pull-request-url', ''); // PRが作成されなかったことを示す
              } else if (error.status === 422 && error.response.data.errors && error.response.data.errors[0].message.includes('A pull request already exists')) {
                console.log('このブランチのプルリクエストが既に存在。新しいPR作成をスキップ。');
                // 既存のPRのURLを取得して出力に設定（任意）
                const { data: existingPrs } = await github.rest.pulls.list({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  head: `${context.repo.owner}:${branchName}`,
                  base: 'main',
                  state: 'open'
                });
                if (existingPrs.length > 0) {
                  core.setOutput('pull-request-url', existingPrs[0].html_url);
                  console.log(`既存のプルリクエスト: ${existingPrs[0].html_url}`);
                } else {
                  core.setOutput('pull-request-url', '');
                }
              } else {
                // その他のエラーはステップを失敗させる
                core.setFailed(`プルリクエストの作成に失敗: ${error.message}`);
                throw error;
              }
            }
        env: # 前のステップからの出力を環境変数として github-script に渡す
          BRANCH_NAME: ${{ steps.branch_name.outputs.branch }}
          COMMIT_SUBJECTS: ${{ steps.commit_subjects.outputs.subjects }}

  # ジョブ3: プルリクエスト時の文法・スタイルチェック
  # mainブランチをターゲットとするPR作成・更新時に実行。
  # Markdownファイルなどの文法やスタイルをチェック。
  lint-and-grammar-check:
    name: PR時のLintと文法チェック
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    permissions:
      contents: read # コード読み取り権限
      pull-requests: write # PRのステータス更新やコメント追加のために必要（任意）
    steps:
      - name: PRブランチをチェックアウト
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.ref }}

      - name: LanguageTool (文法チェッカー) 実行
        # 英語などの文法チェックに特化。
        uses: reviewdog/action-languagetool@v1.22.0
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          reporter: github-pr-review
          level: info

      - name: Alex (文法チェッカー) 実行
        # 不適切な表現やインクルーシブな言葉遣いをチェック。
        uses: reviewdog/action-alex@v1.16.0
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          reporter: github-pr-review
          level: warning

      - name: Markdownファイルをチェック
        id: check_md
        run: |
          if git diff --name-only origin/${{ github.base_ref }}...HEAD | grep '\.md$'; then
            echo "found=true" >> $GITHUB_OUTPUT
          else
            echo "found=false" >> $GITHUB_OUTPUT
          fi

      - name: textlint-github-pr-review 実行
        if: steps.check_md.outputs.found == 'true'
        uses: tsuyoshicho/action-textlint@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          reporter: github-pr-review
          textlint_flags: "**/*.md"

      - name: markdownlint 実行
        if: steps.check_md.outputs.found == 'true'
        uses: reviewdog/action-markdownlint@3667398db9118d7e78f7a63d10e26ce454ba5f58 # v0.26.2
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          reporter: github-pr-review
          level: warning
          
      - name: Reviewdogをデバッグ
        run: echo $REVIEWDOG_DEBUG
        env:
          REVIEWDOG_DEBUG: true

  # ジョブ4: main -> dev/editへの自動マージ
  # mainブランチへのプッシュ、かつsecurity-checkジョブ成功時に実行。
  # mainブランチの最新内容をdevおよびeditブランチに自動マージ。
  auto-merge-main:
    name: mainブランチの内容を自動マージ
    runs-on: ubuntu-latest
    needs: security-check # security-checkジョブの完了に依存
    # GitHub Actions botからのプッシュの場合にのみ実行（mainへのマージはbotが行うため）
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    permissions:
      contents: write # ブランチへのプッシュ権限
    steps:
      - name: リポジトリをチェックアウト
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }} # デフォルトのGitHubトークンを使用

      - name: Gitを設定
        run: |
          git config user.name "GitHub Actions Bot"
          git config user.email "actions@github.com"

      - name: mainをdevへマージ
        run: |
          git checkout dev
          git pull origin dev # devブランチの最新を取得（念のため）
          git merge main -m "Merge main into dev after main update (auto)"
          git push origin dev
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: mainをeditへマージ
        run: |
          git checkout edit
          git pull origin edit # editブランチの最新を取得（念のため）
          git merge main -m "Merge main into edit after main update (auto)"
          git push origin edit
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # ジョブ5: Discord通知
  # ワークフロー全体の最後に実行、結果をDiscordに通知。
  # DISCORD_WEBHOOK_URLシークレットが存在しない場合はスキップ。
  discord-notification:
    name: Discord通知
    runs-on: ubuntu-latest
    # 全ての依存ジョブの完了後に実行 (成功/失敗に関わらず)
    needs: [security-check, auto-pr, lint-and-grammar-check, auto-merge-main]
    if: always() # 全てのジョブの結果に関わらず常に実行

    steps:
      - name: ワークフローステータスを決定
        id: status
        run: |
          WORKFLOW_STATUS="success"
          if [ "${{ needs.security-check.result }}" == "failure" ] || \
             [ "${{ needs.auto-pr.result }}" == "failure" ] || \
             [ "${{ needs.lint-and-grammar-check.result }}" == "failure" ] || \
             [ "${{ needs.auto-merge-main.result }}" == "failure" ]; then
              WORKFLOW_STATUS="failure"
          fi

          MESSAGE="✅ ワークフローが正常に完了しました！"
          COLOR="3066993" # 緑色（decimal）

          if [ "$WORKFLOW_STATUS" == "failure" ]; then
              MESSAGE="❌ ワークフローが失敗しました！"
              COLOR="15548997" # 赤色（decimal）
          fi

          echo "message=$MESSAGE" >> $GITHUB_OUTPUT
          echo "color=$COLOR" >> $GITHUB_OUTPUT
          echo "workflow_status=$WORKFLOW_STATUS" >> $GITHUB_OUTPUT

      - name: Discord Webhook URLをチェック
        id: check_webhook
        run: |
          if [ -z "${{ secrets.DISCORD_WEBHOOK_URL }}" ]; then
            echo "::warning ::DISCORD_WEBHOOK_URL secretが設定されていません。Discord通知をスキップ。"
            echo "send_notification=false" >> $GITHUB_OUTPUT
          else
            echo "send_notification=true" >> $GITHUB_OUTPUT
          fi

      - name: Discord通知を送信
        uses: rjstone/discord-webhook-notify@v1
        # 'send_notification' フラグが 'true' の場合にのみこのステップを実行。
        if: ${{ steps.check_webhook.outputs.send_notification == 'true' }}
        with:
          severity: ${{ steps.status.outputs.workflow_status }}
          description: |
            ${{ steps.status.message }}
            リポジトリ: [${{ github.repository }}](${{ github.server_url }}/${{ github.repository }})
            ワークフロー: [${{ github.workflow }}](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})
            ブランチ: `${{ github.ref_name }}`

            ---
            **各ジョブの結果:**
            - セキュリティチェック: ${{ needs.security-check.result }}
            - 自動PR: ${{ needs.auto-pr.result }}
            - Lint/文法チェック: ${{ needs.lint-and-grammar-check.result }}
            - メインブランチ自動マージ: ${{ needs.auto-merge-main.result }}

            ${{ (needs.auto-pr.outputs.pr_url && needs.auto-pr.result == 'success') && format('**プルリクエスト:** {0}', needs.auto-pr.outputs.pr_url) || '' }}

          webhook_url: ${{ secrets.DISCORD_WEBHOOK_URL }}
